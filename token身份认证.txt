基于token机制的身份认证：
token的意思是“令牌”，是服务器端生成的一串字符串，作为客户端进行请求的一个标识。
用户第一次登陆后，服务器端生成一个token并将这个token返回给客户端，以后客户端每次请求都拦截，用这个token进行身份认证，无需再次带上用户名和密码。
简单组成：uid（用户唯一的身份标识）、time（当前时间的时间戳）、sign（签名，token的前几位以哈希算法压缩成的一定长度的十六进制字符串。为防止token泄露）
流程：
客户端使用用户名和密码请求登录->服务端验证登录信息->生成token值，发送给客户端->客户端存储在cookie或local storage->客户端请求带上token->服务端验证token->成功返回数据给客户端
两种方式：
a.用设备mac地址作为token
客户端：获取设备mac地址，作为参数传递给服务端
服务端：接收参数，保存到数据库中，并将token设置到session中，客户端每次请求都要统一拦截，将客户端传递的token和session中的token进行对比验证。
b.用sessionid作为token
客户端：用户名和密码进行登录
服务端：验证登录信息，将本地获取的sessionid作为token返回给客户端。
APP利用token机制进行身份认证：
用户在登录APP时，APP端会发送加密的用户名和密码到服务器，服务器验证用户名和密码，如果验证成功，就会生成相应位数的字符产作为token存储到服务器中，并且将该token返回给APP端。
以后APP再次请求时，凡是需要验证的地方都要带上该token，然后服务器端验证token，成功返回所需要的结果，失败返回错误信息，让用户重新登录。其中，服务器上会给token设置一个有效期，
每次APP请求的时候都验证token和有效期。
token的存储：
token可以存到数据库中，但是有可能查询token的时间会过长导致token丢失（其实token丢失了再重新认证一个就好，但是别丢太频繁，别让用户没事儿就去认证）。
为了避免查询时间过长，可以将token放到内存中。这样查询速度绝对就不是问题了，也不用太担心占据内存，就算token是一个32位的字符串，应用的用户量在百万级或者千万级，也是占不了多少内存的。
token的加密：
token是很容易泄露的，如果不进行加密处理，很容易被恶意拷贝并用来登录。
加密的方式一般有：
在存储的时候把token进行对称加密存储，用到的时候再解密。文章最开始提到的签名sign：将请求URL、时间戳、token三者合并，通过算法进行加密处理。最好是两种方式结合使用。
还有一点，在网络层面上token使用明文传输的话是非常危险的，所以一定要使用HTTPS协议。